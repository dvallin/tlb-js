import { ResourceName, TlbResource, TlbWorld } from '../tlb';
import { Vector } from '../spatial';
import { Rectangle } from '../geometry/rectangle';
import { Renderer } from '../renderer/renderer';
import { SelectedAction, Movement, Jump } from '../components/action';
import { SelectableAction } from '../ui/tabs/action-selector';
import { Entity } from '../ecs/entity';
import { MultipleChoiceOption } from '../ui/multiple-choice-modal';
import { Queries } from '../renderer/queries';
import { Path } from '../renderer/astar';
import { DialogType, Answer } from '../assets/dialogs';
import { Random } from '../random';
import { State } from '../game-states/state';
import { Distribution } from '../random/distributions';
export interface UI {
    hasElement(position: Vector): boolean;
    render(renderer: Renderer): void;
    isModal: boolean;
    reset(): void;
    showInventoryTransferModal(world: TlbWorld, source: Entity, sourceTitle: string, target: Entity, targetTitle: string): void;
    inventoryTransferModalShowing(): boolean;
    hideInventoryTransferModal(): void;
    showMultipleChoiceModal(world: TlbWorld, title: string, options: MultipleChoiceOption[]): void;
    selectedModalOption(): Entity | undefined;
    multipleChoiceModalShowing(): boolean;
    hideMultipleChoiceModal(): void;
    showDialogModal(world: TlbWorld, random: Random, dialog: DialogType, player: Entity, npc: Entity): void;
    dialogResult(): Answer | undefined;
    dialogShowing(): boolean;
    hideDialogModal(): void;
    hideSelectors(): void;
    showActionSelector(groups: SelectableAction[]): void;
    selectedAction(): SelectedAction | undefined;
    showMovementSelector(target: Entity, queries: Queries, movement: Movement): void;
    selectedMovement(): Path | undefined;
    showAttackSelector(target: Entity, queries: Queries, range: number): void;
    selectedAttack(): Path | undefined;
    showMultipleChoiceSelector(options: MultipleChoiceOption[]): void;
    selectedOption(): Entity | undefined;
    createTabs(world: TlbWorld, focus: Entity): void;
}
export declare function runDialog(ui: UI, world: TlbWorld, random: Random, dialog: DialogType, player: Entity, npc: Entity, pushState: (state: State) => void): Answer | undefined;
export declare class UIResource implements TlbResource, UI {
    readonly rng: Distribution;
    private readonly uniform;
    constructor(rng: Distribution);
    readonly kind: ResourceName;
    visibleElements: Rectangle[];
    isModal: boolean;
    private inventoryTransferModal;
    private multipleChoiceModal;
    private dialogModal;
    private tabs;
    private actionSelector;
    private movementSelector;
    private attackSelector;
    private multipleChoiceSelector;
    update(world: TlbWorld): void;
    render(renderer: Renderer): void;
    reset(): void;
    createTabs(world: TlbWorld, focus: Entity): void;
    showInventoryTransferModal(world: TlbWorld, source: Entity, sourceTitle: string, target: Entity, targetTitle: string): void;
    inventoryTransferModalShowing(): boolean;
    hideInventoryTransferModal(): void;
    showMultipleChoiceModal(world: TlbWorld, title: string, options: {
        entity: Entity;
        description: string;
    }[]): void;
    selectedModalOption(): Entity | undefined;
    multipleChoiceModalShowing(): boolean;
    hideMultipleChoiceModal(): void;
    showDialogModal(world: TlbWorld, random: Random, dialog: DialogType, player: Entity, npc: Entity): void;
    dialogResult(): Answer | undefined;
    dialogShowing(): boolean;
    hideDialogModal(): void;
    hideSelectors(): void;
    showActionSelector(groups: SelectableAction[]): void;
    selectedAction(): SelectedAction | undefined;
    showMovementSelector(target: Entity, queries: Queries, movement: Movement | Jump): void;
    selectedMovement(): Path | undefined;
    showAttackSelector(target: Entity, queries: Queries, range: number): void;
    selectedAttack(): Path | undefined;
    showMultipleChoiceSelector(options: MultipleChoiceOption[]): void;
    selectedOption(): Entity | undefined;
    hasElement(position: Vector): boolean;
}
