import { World } from './ecs/world';
import { System } from './ecs/system';
import { Resource } from './ecs/resource';
import { Renderer } from './renderer/renderer';
import { Queries } from './renderer/queries';
import { State } from './game-states/state';
export declare type ComponentName = 'active' | 'age' | 'ai' | 'asset' | 'character-stats' | 'dead' | 'dialog' | 'effect' | 'equiped-items' | 'feature' | 'fov' | 'free-mode-anchor' | 'ground' | 'has-action' | 'inventory' | 'item' | 'light' | 'lighting' | 'npc' | 'overlay' | 'player' | 'position' | 'region' | 'structure' | 'script' | 'selected-action' | 'active-effects' | 'spawn' | 'start-turn' | 'take-turn' | 'took-turn' | 'triggered-by' | 'triggers' | 'viewport-focus' | 'wait-turn';
export declare type SystemName = 'ai-round-control' | 'start-round' | 'effect' | 'fov' | 'free-mode-control' | 'info-popup' | 'light' | 'npc' | 'player-control' | 'player-interaction' | 'player-round-control' | 'region-creator' | 'script' | 'trigger';
export declare type ResourceName = 'input' | 'map' | 'viewport' | 'ui' | 'log';
export declare type TlbWorld = World<ComponentName, SystemName, ResourceName>;
export declare type TlbResource = Resource<ComponentName, SystemName, ResourceName>;
export declare type TlbSystem = System<ComponentName, SystemName, ResourceName>;
export declare function registerComponents<S, R>(world: World<ComponentName, S, R>): void;
export declare function registerResources(world: World<ComponentName, SystemName, ResourceName>, renderer: Renderer): void;
export declare function registerSystems(world: World<ComponentName, SystemName, ResourceName>, queries: Queries, pushState: (s: State) => void): void;
